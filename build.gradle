import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id 'java'
    id 'java-library'
}

group 'de.linusdev'
version '1.0.0'

targetCompatibility = JavaVersion.VERSION_17
sourceCompatibility = JavaVersion.VERSION_17
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

def cnlTask = tasks.register('copy-native-libraries') {


    def projectPath = project.projectDir.toPath()

    def mainLib = projectPath.resolve("cmake-build-release\\libOpenCLWindowJava.jnilib")
    def baseLib = projectPath.resolve("cmake-build-release\\libs\\OpenCLWindow\\libOpenCLWindow.a")
    def gladLib = projectPath.resolve("cmake-build-release\\libs\\OpenCLWindow\\libs\\glad\\libglad.a")
    def glfwLib = projectPath.resolve("cmake-build-release\\_deps\\glfw3-build\\src\\libglfw3.a")

    if(Files.exists(mainLib) && Files.exists(baseLib) && Files.exists(gladLib) && Files.exists(glfwLib)) {
        project.logger.lifecycle("Copying c/++ libraries")
        def resourceMainDir = projectPath.resolve("src/main/resources/native-libraries")
        def resourceTestDir = projectPath.resolve("src/test/resources/native-libraries")

        Files.copy(mainLib, resourceMainDir.resolve(mainLib.getFileName()), StandardCopyOption.REPLACE_EXISTING)
        Files.copy(baseLib, resourceMainDir.resolve(baseLib.getFileName()), StandardCopyOption.REPLACE_EXISTING)
        Files.copy(gladLib, resourceMainDir.resolve(gladLib.getFileName()), StandardCopyOption.REPLACE_EXISTING)
        Files.copy(glfwLib, resourceMainDir.resolve(glfwLib.getFileName()), StandardCopyOption.REPLACE_EXISTING)

        Files.copy(mainLib, resourceTestDir.resolve(mainLib.getFileName()), StandardCopyOption.REPLACE_EXISTING)
        Files.copy(baseLib, resourceTestDir.resolve(baseLib.getFileName()), StandardCopyOption.REPLACE_EXISTING)
        Files.copy(gladLib, resourceTestDir.resolve(gladLib.getFileName()), StandardCopyOption.REPLACE_EXISTING)
        Files.copy(glfwLib, resourceTestDir.resolve(glfwLib.getFileName()), StandardCopyOption.REPLACE_EXISTING)
    } else {
        project.logger.lifecycle("Cannot copy c/++ libraries.")
        project.logger.lifecycle(mainLib.toString() + ": " + (Files.exists(mainLib) ? "found" : "missing"))
        project.logger.lifecycle(baseLib.toString() + ": " + (Files.exists(baseLib) ? "found" : "missing"))
        project.logger.lifecycle(gladLib.toString() + ": " + (Files.exists(gladLib) ? "found" : "missing"))
        project.logger.lifecycle(glfwLib.toString() + ": " + (Files.exists(glfwLib) ? "found" : "missing"))
    }

}.get()
tasks.named("build").get().dependsOn(cnlTask)

dependencies {
    api 'de.linusdev:lutils:1.0.7'
    api 'org.jetbrains:annotations:23.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}